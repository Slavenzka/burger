{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.scss","containers/Auth/Auth.module.scss","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_scss__WEBPACK_IMPORTED_MODULE_1__","_Input_module_scss__WEBPACK_IMPORTED_MODULE_1___default","Input","_ref","elementType","elementConfig","fieldType","value","label","changed","invalid","shouldValidate","touched","inputElement","inputClasses","css","InputElement","push","a","createElement","Object","assign","className","join","onChange","options","map","option","key","displayValue","Label","htmlFor","error","module","exports","authForm","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","componentDidMount","_this","props","building","authRedirectPath","onSetAuthRedirectPath","inputChangedHandler","event","controlName","updatedControls","updateObject","C_Users_Ivan_Documents_GitHub_study_Udemy_burger_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","_this2","this","formElementsArray","keys","item","index","config","C_Users_Ivan_Documents_GitHub_study_Udemy_burger_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","id","form","isLoading","react__WEBPACK_IMPORTED_MODULE_7___default","components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_13__","formElement","components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_8__","evt","errorMessage","message","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_14__","to","onSubmit","components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_9__","btnType","clicked","Component","connect","auth","loading","token","burgerBuilder","dispatch","setAuthRedirectPath"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,KAAAI,EAAAJ,EAAAE,EAAAC,GAyEeE,IAtEA,SAAAC,GAUP,IATNC,EASMD,EATNC,YACAC,EAQMF,EARNE,cACAC,EAOMH,EAPNG,UACAC,EAMMJ,EANNI,MACAC,EAKML,EALNK,MACAC,EAIMN,EAJNM,QACAC,EAGMP,EAHNO,QACAC,EAEMR,EAFNQ,eACAC,EACMT,EADNS,QAGIC,EAAe,KACbC,EAAe,CAACC,IAAIC,cAM1B,OAJIN,GAAWC,GAAkBC,GAC/BE,EAAaG,KAAKF,IAAIL,SAGhBN,GACN,IAAK,QAGHS,EAAef,EAAAoB,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CACbC,UAAWR,EAAaS,KAAK,MACzBlB,EAFS,CAGbE,MAAOA,EACPiB,SAAUf,KAEZ,MACF,IAAK,WACHI,EAAef,EAAAoB,EAAAC,cAAA,WAAAC,OAAAC,OAAA,CACbC,UAAWR,EAAaS,KAAK,MACzBlB,EAFS,CAGbE,MAAOA,EACPiB,SAAUf,KAEZ,MACF,IAAK,SACHI,EACEf,EAAAoB,EAAAC,cAAA,UACEG,UAAWR,EAAaS,KAAK,KAC7BhB,MAAOA,EACPiB,SAAUf,GAETJ,EAAcoB,QAAQC,IAAI,SAACC,EAAQC,GAAT,OACzB9B,EAAAoB,EAAAC,cAAA,UAAQZ,MAAOoB,EAAOpB,MAAOqB,IAAKA,GAAMD,EAAOE,iBAIrD,MACF,QACEhB,EAAef,EAAAoB,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CACbC,UAAWR,EAAaS,KAAK,MACzBlB,EAFS,CAGbE,MAAOA,EACPiB,SAAUf,KAIhB,OAEEX,EAAAoB,EAAAC,cAAA,OAAKG,UAAWP,IAAIb,OAClBJ,EAAAoB,EAAAC,cAAA,SAAOG,UAAWP,IAAIe,MAAOC,QAAQ,QAAQvB,GAC5CK,EACAH,GAAWC,GAAkBC,GAAWd,EAAAoB,EAAAC,cAAA,KAAGG,UAAWP,IAAIiB,OAAlB,uBAA8C1B,0BCnE7F2B,EAAAC,QAAA,CAAkBhC,MAAA,qBAAA4B,MAAA,qBAAAd,aAAA,4BAAAN,QAAA,uBAAAsB,MAAA,2CCAlBC,EAAAC,QAAA,CAAkBC,SAAA,kNC0BZC,6MACJC,MAAQ,CACNC,SAAU,CACRC,MAAO,CACLnC,YAAa,QACbC,cAAe,CACbmC,KAAM,QACNC,YAAa,gBAEflC,MAAO,GACPmC,WAAY,CACVC,UAAU,EACVC,SAAS,GAEXC,OAAO,EACPjC,SAAS,GAEXkC,SAAU,CACR1C,YAAa,QACbC,cAAe,CACbmC,KAAM,WACNC,YAAa,YAEflC,MAAO,GACPmC,WAAY,CACVC,UAAU,EACVI,UAAW,GAEbF,OAAO,EACPjC,SAAS,IAIboC,UAAU,KAGZC,kBAAoB,WACbC,EAAKC,MAAMC,UAA4C,MAAhCF,EAAKC,MAAME,kBACrCH,EAAKC,MAAMG,2BAIfC,oBAAsB,SAACC,EAAOC,GAC5B,IAAMC,EAAkBC,YAAaT,EAAKb,MAAMC,SAAZlB,OAAAwC,EAAA,EAAAxC,CAAA,GACjCqC,EAAcE,YAAaT,EAAKb,MAAMC,SAASmB,GAAc,CAC5DlD,MAAOiD,EAAMK,OAAOtD,MACpBsC,MAAOiB,YAAcN,EAAMK,OAAOtD,MAAO2C,EAAKb,MAAMC,SAASmB,GAAaf,YAC1E9B,SAAS,MAGbsC,EAAKa,SAAS,CACZzB,SAAUoB,OAIdM,cAAgB,SAACR,GACfA,EAAMS,iBACNf,EAAKC,MAAMe,OAAOhB,EAAKb,MAAMC,SAASC,MAAMhC,MAAO2C,EAAKb,MAAMC,SAASQ,SAASvC,MAAO2C,EAAKb,MAAMW,aAGpGmB,sBAAwB,SAACX,GACvBA,EAAMS,iBACNf,EAAKa,SAAS,SAAAK,GACZ,MAAO,CACLpB,UAAWoB,EAAUpB,qFAKjB,IAAAqB,EAAAC,KACFC,EAAoBnD,OAAOoD,KAAKF,KAAKjC,MAAMC,UAAUZ,IAAI,SAAC+C,EAAMC,GACpE,MAAO,CACLC,OAAOvD,OAAAwD,EAAA,EAAAxD,CAAA,GAAMiD,EAAKhC,MAAMC,SAASmC,IACjCI,GAAIJ,KAIFK,EAAOR,KAAKnB,MAAM4B,UACpBC,EAAA9D,EAAAC,cAAC8D,EAAA,EAAD,MACAV,EAAkB7C,IAAI,SAAAwD,GACpB,OACEF,EAAA9D,EAAAC,cAACgE,EAAA,EAAD,CACE/E,YAAa8E,EAAYP,OAAOvE,YAChCC,cAAe6E,EAAYP,OAAOtE,cAClCE,MAAO2E,EAAYP,OAAOpE,MAC1BE,QAAS,SAAA2E,GAAG,OAAIf,EAAKd,oBAAoB6B,EAAKF,EAAYL,KAC1DlE,eAAgBuE,EAAYP,OAAOjC,WACnChC,SAAUwE,EAAYP,OAAO9B,MAC7BjC,QAASsE,EAAYP,OAAO/D,QAC5BN,UAAW4E,EAAYL,GACvBjD,IAAKsD,EAAYL,OAKrBQ,EAAef,KAAKnB,MAAMnB,MAC5BgD,EAAA9D,EAAAC,cAAA,SAAImD,KAAKnB,MAAMnB,MAAMsD,SACrB,KAEJ,OAAIhB,KAAKnB,MAAMoC,gBACNP,EAAA9D,EAAAC,cAACqE,EAAA,EAAD,CAAUC,GAAInB,KAAKnB,MAAME,mBAIhC2B,EAAA9D,EAAAC,cAAA,OAAKG,UAAWP,IAAIoB,UACjBkD,EACDL,EAAA9D,EAAAC,cAAA,QAAMuE,SAAUpB,KAAKN,eAClBc,EACDE,EAAA9D,EAAAC,cAACwE,EAAA,EAAD,CACEC,QAAQ,WADV,UAKAZ,EAAA9D,EAAAC,cAACwE,EAAA,EAAD,CACEC,QAAQ,SACRC,QAASvB,KAAKH,uBAFhB,aAIaG,KAAKjC,MAAMW,SAAW,SAAW,mBArHrC8C,aA6HJC,sBAvIS,SAAA1D,GACtB,MAAO,CACL0C,UAAW1C,EAAM2D,KAAKC,QACtBjE,MAAOK,EAAM2D,KAAKhE,MAClBuD,kBAAmBlD,EAAM2D,KAAKE,MAC9B9C,SAAUf,EAAM8D,cAAc/C,SAC9BC,iBAAkBhB,EAAM2D,KAAK3C,mBAbN,SAAA+C,GACzB,MAAO,CACLlC,OAAQ,SAAC3B,EAAOO,EAAUE,GAAlB,OAA+BoD,EAASJ,YAAKzD,EAAOO,EAAUE,KACtEM,sBAAuB,kBAAM8C,EAASC,YAAoB,SA2I/CN,CAA6C3D","file":"static/js/4.011802f7.chunk.js","sourcesContent":["import React from 'react'\r\nimport css from './Input.module.scss'\r\n\r\nconst Input  = ({\r\n  elementType,\r\n  elementConfig,\r\n  fieldType,\r\n  value,\r\n  label,\r\n  changed,\r\n  invalid,\r\n  shouldValidate,\r\n  touched\r\n  }) => {\r\n  // let's make a flexible component which decides, which input type is required by props\r\n  let inputElement = null\r\n  const inputClasses = [css.InputElement]\r\n\r\n  if (invalid && shouldValidate && touched) {\r\n    inputClasses.push(css.invalid)\r\n  }\r\n\r\n  switch (elementType) {\r\n    case 'input':\r\n      // By using {...props} we reduce the complexity of a component and expect right props for\r\n      // the right inputElement\r\n      inputElement = <input\r\n        className={inputClasses.join(' ')}\r\n        {...elementConfig}\r\n        value={value}\r\n        onChange={changed}\r\n      />\r\n      break\r\n    case 'textarea':\r\n      inputElement = <textarea\r\n        className={inputClasses.join(' ')}\r\n        {...elementConfig}\r\n        value={value}\r\n        onChange={changed}\r\n      />\r\n      break\r\n    case 'select':\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(' ')}\r\n          value={value}\r\n          onChange={changed}\r\n        >\r\n          {elementConfig.options.map((option, key) => (\r\n            <option value={option.value} key={key}>{option.displayValue}</option>\r\n          ))}\r\n        </select>\r\n      )\r\n      break\r\n    default:\r\n      inputElement = <input\r\n        className={inputClasses.join(' ')}\r\n        {...elementConfig}\r\n        value={value}\r\n        onChange={changed}\r\n      />\r\n  }\r\n\r\n  return (\r\n    /** div wrapper for styling and positioning **/\r\n    <div className={css.Input}>\r\n      <label className={css.Label} htmlFor=\"test\">{label}</label>\r\n      {inputElement}\r\n      {invalid && shouldValidate && touched && <p className={css.error}>Please, input valid {fieldType}</p>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3vazb\",\"Label\":\"Input_Label__2VRKQ\",\"InputElement\":\"Input_InputElement__vIXTv\",\"invalid\":\"Input_invalid__zN1y_\",\"error\":\"Input_error__3pC9Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authForm\":\"Auth_authForm__3tR5d\"};","import React, { Component } from 'react'\r\nimport Input from 'components/UI/Input/Input'\r\nimport Button from 'components/UI/Button/Button'\r\nimport css from './Auth.module.scss'\r\nimport { auth, setAuthRedirectPath } from 'store/actions'\r\nimport { connect } from 'react-redux'\r\nimport Spinner from 'components/UI/Spinner/Spinner'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { checkValidity, updateObject } from 'shared/utility'\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignup) => dispatch(auth(email, password, isSignup)),\r\n    onSetAuthRedirectPath: () => dispatch(setAuthRedirectPath('/'))\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isLoading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: !!state.auth.token,\r\n    building: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath\r\n  }\r\n}\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'Mail Address'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      password: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'password',\r\n          placeholder: 'Password'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 6\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      }\r\n    },\r\n    // We are in signup mode initially\r\n    isSignup: true\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    if (!this.props.building && this.props.authRedirectPath !== '/') {\r\n      this.props.onSetAuthRedirectPath()\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(this.state.controls, {\r\n      [controlName]: updateObject(this.state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n        touched: true\r\n      })\r\n    })\r\n    this.setState({\r\n      controls: updatedControls\r\n    })\r\n  }\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault()\r\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\r\n  }\r\n\r\n  switchAuthModeHandler = (event) => {\r\n    event.preventDefault()\r\n    this.setState(prevState => {\r\n      return {\r\n        isSignup: !prevState.isSignup\r\n      }\r\n    })\r\n  }\r\n\r\n  render () {\r\n    const formElementsArray = Object.keys(this.state.controls).map((item, index) => {\r\n      return {\r\n        config: { ...this.state.controls[item] },\r\n        id: item\r\n      }\r\n    })\r\n\r\n    const form = this.props.isLoading\r\n      ? <Spinner />\r\n      : formElementsArray.map(formElement => {\r\n          return (\r\n            <Input\r\n              elementType={formElement.config.elementType}\r\n              elementConfig={formElement.config.elementConfig}\r\n              value={formElement.config.value}\r\n              changed={evt => this.inputChangedHandler(evt, formElement.id)}\r\n              shouldValidate={formElement.config.validation}\r\n              invalid={!formElement.config.valid}\r\n              touched={formElement.config.touched}\r\n              fieldType={formElement.id}\r\n              key={formElement.id}\r\n            />\r\n          )\r\n        })\r\n\r\n    const errorMessage = this.props.error\r\n      ? <p>{this.props.error.message}</p>\r\n      : null\r\n\r\n    if (this.props.isAuthenticated) {\r\n      return <Redirect to={this.props.authRedirectPath} />\r\n    }\r\n\r\n    return (\r\n      <div className={css.authForm}>\r\n        {errorMessage}\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button\r\n            btnType='Success'\r\n          >\r\n            SUBMIT\r\n          </Button>\r\n          <Button\r\n            btnType='Danger'\r\n            clicked={this.switchAuthModeHandler}\r\n          >\r\n            SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)\r\n"],"sourceRoot":""}