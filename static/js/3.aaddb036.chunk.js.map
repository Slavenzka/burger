{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.scss","components/Order/CheckoutSummary/CheckoutSummary.module.scss","containers/Checkout/ContactData/ContactData.module.scss","components/Order/CheckoutSummary/CheckoutSummary.js","utils.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_scss__WEBPACK_IMPORTED_MODULE_1__","_Input_module_scss__WEBPACK_IMPORTED_MODULE_1___default","Input","_ref","elementType","elementConfig","fieldType","value","label","changed","invalid","shouldValidate","touched","inputElement","inputClasses","css","InputElement","push","a","createElement","Object","assign","className","join","onChange","options","map","option","key","displayValue","Label","htmlFor","error","module","exports","checkoutSummary","ContactData","CheckoutSummary","props","react_default","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","createInputConfig","elType","type","placeholder","validation","required","valid","state","orderForm","name","street","zip","country","email","deliveryMethod","address","postalCode","loading","formIsValid","orderHandler","evt","preventDefault","formData","formElementIdentifier","_this","order","price","totalPrice","orderData","userId","userID","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","inputID","setState","_this2","this","formElementsArray","keys","item","index","config","objectSpread","id","form","Spinner","onSubmit","formElement","disabled","Component","connect","burgerBuilder","auth","dispatch","purchaseBurger","WithErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","purchasedRedirect","purchased","react_router","to","Fragment","Order_CheckoutSummary_CheckoutSummary","path","match","component"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,KAAAI,EAAAJ,EAAAE,EAAAC,GAyEeE,IAtEA,SAAAC,GAUP,IATNC,EASMD,EATNC,YACAC,EAQMF,EARNE,cACAC,EAOMH,EAPNG,UACAC,EAMMJ,EANNI,MACAC,EAKML,EALNK,MACAC,EAIMN,EAJNM,QACAC,EAGMP,EAHNO,QACAC,EAEMR,EAFNQ,eACAC,EACMT,EADNS,QAGIC,EAAe,KACbC,EAAe,CAACC,IAAIC,cAM1B,OAJIN,GAAWC,GAAkBC,GAC/BE,EAAaG,KAAKF,IAAIL,SAGhBN,GACN,IAAK,QAGHS,EAAef,EAAAoB,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CACbC,UAAWR,EAAaS,KAAK,MACzBlB,EAFS,CAGbE,MAAOA,EACPiB,SAAUf,KAEZ,MACF,IAAK,WACHI,EAAef,EAAAoB,EAAAC,cAAA,WAAAC,OAAAC,OAAA,CACbC,UAAWR,EAAaS,KAAK,MACzBlB,EAFS,CAGbE,MAAOA,EACPiB,SAAUf,KAEZ,MACF,IAAK,SACHI,EACEf,EAAAoB,EAAAC,cAAA,UACEG,UAAWR,EAAaS,KAAK,KAC7BhB,MAAOA,EACPiB,SAAUf,GAETJ,EAAcoB,QAAQC,IAAI,SAACC,EAAQC,GAAT,OACzB9B,EAAAoB,EAAAC,cAAA,UAAQZ,MAAOoB,EAAOpB,MAAOqB,IAAKA,GAAMD,EAAOE,iBAIrD,MACF,QACEhB,EAAef,EAAAoB,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CACbC,UAAWR,EAAaS,KAAK,MACzBlB,EAFS,CAGbE,MAAOA,EACPiB,SAAUf,KAIhB,OAEEX,EAAAoB,EAAAC,cAAA,OAAKG,UAAWP,IAAIb,OAClBJ,EAAAoB,EAAAC,cAAA,SAAOG,UAAWP,IAAIe,MAAOC,QAAQ,QAAQvB,GAC5CK,EACAH,GAAWC,GAAkBC,GAAWd,EAAAoB,EAAAC,cAAA,KAAGG,UAAWP,IAAIiB,OAAlB,uBAA8C1B,0BCnE7F2B,EAAAC,QAAA,CAAkBhC,MAAA,qBAAA4B,MAAA,qBAAAd,aAAA,4BAAAN,QAAA,uBAAAsB,MAAA,2CCAlBC,EAAAC,QAAA,CAAkBC,gBAAA,+DCAlBF,EAAAC,QAAA,CAAkBE,YAAA,oKC8BHC,EAvBS,SAACC,GACvB,OACEC,EAAArB,EAAAC,cAAA,OAAKG,UAAWP,IAAIoB,iBAClBI,EAAArB,EAAAC,cAAA,qCACAoB,EAAArB,EAAAC,cAAA,OAAKqB,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SACnCH,EAAArB,EAAAC,cAACwB,EAAA,EAAD,CAAQC,YAAaN,EAAMM,eAE7BL,EAAArB,EAAAC,cAAC0B,EAAA,EAAD,CACEC,QAAQ,SACRC,QAAST,EAAMU,mBAFjB,UAMAT,EAAArB,EAAAC,cAAC0B,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAST,EAAMW,mBAFjB,gGCrBOC,EAAoB,SAACC,EAAQC,EAAMC,EAAa9C,GAC3D,MAAO,CACLH,YAAa+C,EACb9C,cAAe,CACb+C,KAAMA,EACNC,YAAaA,GAEf9C,MAAOA,EACP+C,WAAY,CACVC,UAAU,GAEZC,OAAO,EACP5C,SAAS,WCoBPwB,6MACJqB,MAAQ,CACNC,UAAW,CACTC,KAAMT,EAAkB,QAAS,OAAQ,YAAa,IACtDU,OAAQV,EAAkB,QAAS,OAAQ,cAAe,IAC1DW,IAAKX,EAAkB,QAAS,OAAQ,WAAY,IACpDY,QAASZ,EAAkB,QAAS,OAAQ,eAAgB,IAC5Da,MAAOb,EAAkB,QAAS,QAAS,aAAc,IACzDc,eAAgB,CACd5D,YAAa,SACbC,cAAe,CACboB,QAAS,CACP,CACElB,MAAO,UACPsB,aAAc,WAEhB,CACEtB,MAAO,WACPsB,aAAc,cAIpByB,WAAY,GACZ/C,MAAO,UACPiD,OAAO,IAGXG,KAAM,GACNI,MAAO,GACPE,QAAS,CACPL,OAAQ,GACRM,WAAY,IAEdC,SAAS,EACTC,aAAa,KAGfC,aAAe,SAACC,GACdA,EAAIC,iBACJ,IAAMC,EAAW,GACjB,IAAK,IAAIC,KAAyBC,EAAKjB,MAAMC,UAC3Cc,EAASC,GAAyBC,EAAKjB,MAAMC,UAAUe,GAAuBlE,MAEhF,IAAMoE,EAAQ,CACZ/B,YAAa8B,EAAKpC,MAAMM,YACxBgC,MAAOF,EAAKpC,MAAMuC,WAClBC,UAAWN,EACXO,OAAQL,EAAKpC,MAAM0C,QAErBN,EAAKpC,MAAM2C,cAAcN,EAAOD,EAAKpC,MAAM4C,UAG7CC,oBAAsB,SAACb,EAAKc,GAC1B,IAAMC,EAAqBC,YAAaZ,EAAKjB,MAAMC,UAAU0B,GAAkB,CAC7E7E,MAAO+D,EAAIiB,OAAOhF,MAClBiD,MAAOgC,YAAclB,EAAIiB,OAAOhF,MAAOmE,EAAKjB,MAAMC,UAAU0B,GAAiB9B,YAC7E1C,SAAS,IAGL6E,EAAmBH,YAAaZ,EAAKjB,MAAMC,UAAZtC,OAAAsE,EAAA,EAAAtE,CAAA,GAClCgE,EAAkBC,IAGjBjB,GAAc,EAClB,IAAK,IAAIuB,KAAWF,EAClBrB,EAAcqB,EAAiBE,GAASnC,OAASY,EAGnDM,EAAKkB,SAAS,CAAElC,UAAW+B,EAAkBrB,YAAaA,6EAGlD,IAAAyB,EAAAC,KACFC,EAAoB3E,OAAO4E,KAAKF,KAAKrC,MAAMC,WAAWhC,IAAI,SAACuE,EAAMC,GACrE,MAAO,CACLC,OAAO/E,OAAAgF,EAAA,EAAAhF,CAAA,GAAMyE,EAAKpC,MAAMC,UAAUuC,IAClCI,GAAIJ,KAGJK,EAAOR,KAAKxD,MAAM6B,QAAU5B,EAAArB,EAAAC,cAACoF,EAAA,EAAD,MAC9BhE,EAAArB,EAAAC,cAAA,QAAMqF,SAAUV,KAAKzB,cAClB0B,EAAkBrE,IAAI,SAAA+E,GAAW,OAChClE,EAAArB,EAAAC,cAACjB,EAAA,EAAD,CACEE,YAAaqG,EAAYN,OAAO/F,YAChCC,cAAeoG,EAAYN,OAAO9F,cAClCE,MAAOkG,EAAYN,OAAO5F,MAC1BE,QAAS,SAAA6D,GAAG,OAAIuB,EAAKV,oBAAoBb,EAAKmC,EAAYJ,KAC1D1F,eAAgB8F,EAAYN,OAAO7C,WACnC5C,SAAU+F,EAAYN,OAAO3C,MAC7B5C,QAAS6F,EAAYN,OAAOvF,QAC5BN,UAAWmG,EAAYJ,GACvBzE,IAAK6E,EAAYJ,OAGrB9D,EAAArB,EAAAC,cAAC0B,EAAA,EAAD,CAAQC,QAAQ,UAAU4D,UAAWZ,KAAKrC,MAAMW,aAAhD,UAIJ,OACE7B,EAAArB,EAAAC,cAAA,OAAKG,UAAWP,IAAIqB,aAClBG,EAAArB,EAAAC,cAAA,sCACCmF,UApGiBK,aA0GXC,cA1HS,SAAAnD,GACtB,MAAO,CACLb,YAAaa,EAAMoD,cAAcjE,YACjCiC,WAAYpB,EAAMoD,cAAchC,WAChCV,QAASV,EAAMkB,MAAMR,QACrBe,MAAOzB,EAAMqD,KAAK5B,MAClBF,OAAQvB,EAAMqD,KAAK9B,SAII,SAAA+B,GACzB,MAAO,CACL9B,cAAe,SAACH,EAAWI,GAAZ,OAAsB6B,EAASC,YAAelC,EAAWI,OA8G7D0B,CAA6CK,YAAiB7E,EAAa8E,cCzHpFC,6MACJC,yBAA2B,WACzB1C,EAAKpC,MAAM+E,QAAQC,YAGrBC,yBAA2B,WACzB7C,EAAKpC,MAAM+E,QAAQG,QAAQ,mGAI3B,IAAMC,EAAqB3B,KAAKxD,MAAMM,aAAekD,KAAKxD,MAAMoF,UAAanF,EAAArB,EAAAC,cAACwG,EAAA,EAAD,CAAUC,GAAG,MAAS,KAcnG,OAbgB9B,KAAKxD,MAAMM,YAEvBL,EAAArB,EAAAC,cAAAoB,EAAArB,EAAA2G,SAAA,KACGJ,EACDlF,EAAArB,EAAAC,cAAC2G,EAAD,CACElF,YAAakD,KAAKxD,MAAMM,YACxBI,kBAAmB8C,KAAKsB,yBACxBnE,kBAAmB6C,KAAKyB,2BAE1BhF,EAAArB,EAAAC,cAACwG,EAAA,EAAD,CAAOI,KAAMjC,KAAKxD,MAAM0F,MAAMD,KAAO,gBAAiBE,UAAW7F,KAGnEG,EAAArB,EAAAC,cAACwG,EAAA,EAAD,CAAUC,GAAG,aAvBEjB,aA4BRC,sBApCS,SAAAnD,GACtB,MAAO,CACLb,YAAaa,EAAMoD,cAAcjE,YACjCiC,WAAYpB,EAAMoD,cAAchC,WAChC6C,UAAWjE,EAAMkB,MAAM+C,YAgCZd,CAAyBO","file":"static/js/3.aaddb036.chunk.js","sourcesContent":["import React from 'react'\r\nimport css from './Input.module.scss'\r\n\r\nconst Input  = ({\r\n  elementType,\r\n  elementConfig,\r\n  fieldType,\r\n  value,\r\n  label,\r\n  changed,\r\n  invalid,\r\n  shouldValidate,\r\n  touched\r\n  }) => {\r\n  // let's make a flexible component which decides, which input type is required by props\r\n  let inputElement = null\r\n  const inputClasses = [css.InputElement]\r\n\r\n  if (invalid && shouldValidate && touched) {\r\n    inputClasses.push(css.invalid)\r\n  }\r\n\r\n  switch (elementType) {\r\n    case 'input':\r\n      // By using {...props} we reduce the complexity of a component and expect right props for\r\n      // the right inputElement\r\n      inputElement = <input\r\n        className={inputClasses.join(' ')}\r\n        {...elementConfig}\r\n        value={value}\r\n        onChange={changed}\r\n      />\r\n      break\r\n    case 'textarea':\r\n      inputElement = <textarea\r\n        className={inputClasses.join(' ')}\r\n        {...elementConfig}\r\n        value={value}\r\n        onChange={changed}\r\n      />\r\n      break\r\n    case 'select':\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(' ')}\r\n          value={value}\r\n          onChange={changed}\r\n        >\r\n          {elementConfig.options.map((option, key) => (\r\n            <option value={option.value} key={key}>{option.displayValue}</option>\r\n          ))}\r\n        </select>\r\n      )\r\n      break\r\n    default:\r\n      inputElement = <input\r\n        className={inputClasses.join(' ')}\r\n        {...elementConfig}\r\n        value={value}\r\n        onChange={changed}\r\n      />\r\n  }\r\n\r\n  return (\r\n    /** div wrapper for styling and positioning **/\r\n    <div className={css.Input}>\r\n      <label className={css.Label} htmlFor=\"test\">{label}</label>\r\n      {inputElement}\r\n      {invalid && shouldValidate && touched && <p className={css.error}>Please, input valid {fieldType}</p>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3vazb\",\"Label\":\"Input_Label__2VRKQ\",\"InputElement\":\"Input_InputElement__vIXTv\",\"invalid\":\"Input_invalid__zN1y_\",\"error\":\"Input_error__3pC9Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkoutSummary\":\"CheckoutSummary_checkoutSummary__uRwvS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2x-gu\"};","// common\r\nimport React from 'react'\r\n// components\r\nimport Burger from 'components/Burger/Burger'\r\nimport Button from 'components/UI/Button/Button'\r\n// style\r\nimport css from './CheckoutSummary.module.scss'\r\n\r\nconst CheckoutSummary = (props) => {\r\n  return (\r\n    <div className={css.checkoutSummary}>\r\n      <h1>We hope it tastes well!</h1>\r\n      <div style={{ width: '100%', margin: 'auto' }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button\r\n        btnType='Danger'\r\n        clicked={props.checkoutCancelled}\r\n      >\r\n        CANCEL\r\n      </Button>\r\n      <Button\r\n        btnType='Success'\r\n        clicked={props.checkoutContinued}\r\n      >\r\n        SUCCESS\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CheckoutSummary\r\n","export const createInputConfig = (elType, type, placeholder, value) => {\r\n  return {\r\n    elementType: elType,\r\n    elementConfig: {\r\n      type: type,\r\n      placeholder: placeholder\r\n    },\r\n    value: value,\r\n    validation: {\r\n      required: true\r\n    },\r\n    valid: false,\r\n    touched: false\r\n  }\r\n}\r\n","// common\r\nimport React, { Component } from 'react'\r\n// components\r\nimport Button from 'components/UI/Button/Button'\r\nimport Spinner from 'components/UI/Spinner/Spinner'\r\nimport Input from 'components/UI/Input/Input'\r\n// packages\r\nimport { connect } from 'react-redux'\r\n// styles\r\nimport css from './ContactData.module.scss'\r\nimport WithErrorHandler from 'hoc/WithErrorHandling/WithErrorHandling'\r\nimport axios from 'axios-orders'\r\nimport { purchaseBurger } from 'store/actions'\r\nimport { createInputConfig } from 'utils'\r\nimport { checkValidity, updateObject } from 'shared/utility'\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ingredients: state.burgerBuilder.ingredients,\r\n    totalPrice: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userID: state.auth.userID\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onOrderBurger: (orderData, token) => dispatch(purchaseBurger(orderData, token))\r\n  }\r\n}\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: createInputConfig('input', 'text', 'Your name', ''),\r\n      street: createInputConfig('input', 'text', 'Street name', ''),\r\n      zip: createInputConfig('input', 'text', 'ZIP Code', ''),\r\n      country: createInputConfig('input', 'text', 'Your country', ''),\r\n      email: createInputConfig('input', 'email', 'Your email', ''),\r\n      deliveryMethod: {\r\n        elementType: 'select',\r\n        elementConfig: {\r\n          options: [\r\n            {\r\n              value: 'fastest',\r\n              displayValue: 'Fastest'\r\n            },\r\n            {\r\n              value: 'cheapest',\r\n              displayValue: 'Cheapest'\r\n            }\r\n          ]\r\n        },\r\n        validation: {},\r\n        value: 'fastest',\r\n        valid: true\r\n      }\r\n    },\r\n    name: '',\r\n    email: '',\r\n    address: {\r\n      street: '',\r\n      postalCode: ''\r\n    },\r\n    loading: false,\r\n    formIsValid: false\r\n  }\r\n\r\n  orderHandler = (evt) => {\r\n    evt.preventDefault()\r\n    const formData = {}\r\n    for (let formElementIdentifier in this.state.orderForm) {\r\n      formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ingredients,\r\n      price: this.props.totalPrice,\r\n      orderData: formData,\r\n      userId: this.props.userID\r\n    }\r\n    this.props.onOrderBurger(order, this.props.token)\r\n  }\r\n\r\n  inputChangedHandler = (evt, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n      value: evt.target.value,\r\n      valid: checkValidity(evt.target.value, this.state.orderForm[inputIdentifier].validation),\r\n      touched: true\r\n    })\r\n\r\n    const updatedOrderForm = updateObject(this.state.orderForm, {\r\n      [inputIdentifier]: updatedFormElement\r\n    })\r\n\r\n    let formIsValid = true\r\n    for (let inputID in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputID].valid && formIsValid\r\n    }\r\n\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid })\r\n  }\r\n\r\n  render () {\r\n    const formElementsArray = Object.keys(this.state.orderForm).map((item, index) => {\r\n      return {\r\n        config: { ...this.state.orderForm[item] },\r\n        id: item\r\n      }\r\n    })\r\n    let form = this.props.loading ? <Spinner /> : (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementsArray.map(formElement => (\r\n          <Input\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            changed={evt => this.inputChangedHandler(evt, formElement.id)}\r\n            shouldValidate={formElement.config.validation}\r\n            invalid={!formElement.config.valid}\r\n            touched={formElement.config.touched}\r\n            fieldType={formElement.id}\r\n            key={formElement.id}\r\n          />\r\n        ))}\r\n        <Button btnType='Success' disabled={!this.state.formIsValid}>ORDER</Button>\r\n      </form>\r\n    )\r\n\r\n    return (\r\n      <div className={css.ContactData}>\r\n        <h4>Enter your contact data:</h4>\r\n        {form}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WithErrorHandler(ContactData, axios))\r\n","// common\r\nimport React, { Component } from 'react'\r\n// components\r\nimport CheckoutSummary from 'components/Order/CheckoutSummary/CheckoutSummary'\r\nimport ContactData from 'containers/Checkout/ContactData/ContactData'\r\n// packages\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ingredients: state.burgerBuilder.ingredients,\r\n    totalPrice: state.burgerBuilder.totalPrice,\r\n    purchased: state.order.purchased\r\n  }\r\n}\r\n\r\nclass Checkout extends Component {\r\n  checkoutCancelledHandler = () => {\r\n    this.props.history.goBack()\r\n  }\r\n\r\n  checkoutContinuedHandler = () => {\r\n    this.props.history.replace('/checkout/contact-data')\r\n  }\r\n\r\n  render () {\r\n    const purchasedRedirect = (this.props.ingredients && this.props.purchased) ? <Redirect to='/' /> : null\r\n    const summary = this.props.ingredients\r\n      ? (\r\n        <>\r\n          {purchasedRedirect}\r\n          <CheckoutSummary\r\n            ingredients={this.props.ingredients}\r\n            checkoutCancelled={this.checkoutCancelledHandler}\r\n            checkoutContinued={this.checkoutContinuedHandler}\r\n          />\r\n          <Route path={this.props.match.path + '/contact-data'} component={ContactData} />\r\n        </>\r\n      )\r\n      : <Redirect to='/' />\r\n    return summary\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout)\r\n"],"sourceRoot":""}